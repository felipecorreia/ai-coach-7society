"""
üìö FutEnglish Lesson Manager
Sistema de li√ß√µes educacionais e progress√£o
"""

import logging
from typing import Dict, Any, Optional, Tuple
from datetime import datetime
import random

from user_state import UserSession, user_state_manager
from audio_manager import audio_manager

logger = logging.getLogger(__name__)

class LessonDelivery:
    """Gerencia entrega e apresenta√ß√£o de li√ß√µes"""
    
    def __init__(self):
        from content import lesson_manager as content_lesson_manager, ContentHelper
        self.content_manager = content_lesson_manager
        self.content_helper = ContentHelper()
    
    async def start_lesson(self, session: UserSession) -> Tuple[str, Optional[str], Optional[str]]:
        """
        Inicia uma nova li√ß√£o
        
        Args:
            session: Sess√£o do usu√°rio
            
        Returns:
            Tupla (texto_resposta, caminho_audio_pt, caminho_audio_en)
        """
        logger.info(f"üìö Iniciando li√ß√£o para usu√°rio {session.user_id}")
        
        # Busca li√ß√£o atual
        lesson = self.content_manager.get_lesson_by_id(session.current_lesson_id)
        
        if not lesson:
            # Se n√£o encontrou, pega li√ß√£o aleat√≥ria baseada no n√≠vel
            lesson = self.content_manager.get_random_lesson(session.english_level)
            if lesson:
                user_state_manager.update_session(session.user_id, current_lesson_id=lesson['id'])
        
        if not lesson:
            return "Opa! N√£o encontrei nenhuma li√ß√£o dispon√≠vel. Vamos conversar sobre futebol!", None, None
        
        # Gera texto da li√ß√£o
        lesson_text = self._format_lesson_text(lesson, session)
        
        # Gera √°udios
        pt_audio, en_audio = await self._generate_lesson_audio(session, lesson)
        
        logger.info(f"‚úÖ Li√ß√£o {lesson['id']} entregue para usu√°rio {session.user_id}")
        
        return lesson_text, pt_audio, en_audio
    
    async def next_lesson(self, session: UserSession) -> Tuple[str, Optional[str], Optional[str]]:
        """
        Avan√ßa para pr√≥xima li√ß√£o
        
        Args:
            session: Sess√£o do usu√°rio
            
        Returns:
            Tupla (texto_resposta, caminho_audio_pt, caminho_audio_en)
        """
        logger.info(f"üìö Avan√ßando para pr√≥xima li√ß√£o - usu√°rio {session.user_id}")
        
        # Marca li√ß√£o atual como completa (fake)
        if session.current_lesson_id not in session.lessons_completed:
            session.lessons_completed.append(session.current_lesson_id)
        
        # Busca pr√≥xima li√ß√£o
        next_lesson = self.content_manager.get_next_lesson(
            session.current_lesson_id, 
            session.english_level
        )
        
        if not next_lesson:
            return "Parab√©ns! Voc√™ completou todas as li√ß√µes dispon√≠veis! üéâ", None, None
        
        # Atualiza sess√£o
        user_state_manager.update_session(
            session.user_id, 
            current_lesson_id=next_lesson['id']
        )
        
        # Gera resposta de transi√ß√£o
        transition_text = self._generate_transition_text(session, next_lesson)
        
        # Gera √°udios
        pt_audio, en_audio = await self._generate_lesson_audio(session, next_lesson)
        
        return transition_text, pt_audio, en_audio
    
    def _format_lesson_text(self, lesson: Dict[str, Any], session: UserSession) -> str:
        """Formata texto da li√ß√£o para exibi√ß√£o"""
        text = f"‚öΩ **Li√ß√£o {lesson['id']} - {lesson.get('category', 'Vocabul√°rio').title()}**\n\n"
        
        # Sauda√ß√£o personalizada
        greetings = [
            f"Opa, {session.name}! Vamos aprender uma palavra importante!",
            f"E a√≠, {session.name}! Bora para mais uma palavra de futebol!",
            f"Beleza, {session.name}! Hoje temos uma palavra massa!",
            f"Fala, {session.name}! Preparado para mais vocabul√°rio?"
        ]
        text += random.choice(greetings) + "\n\n"
        
        # Palavra principal
        text += f"üáßüá∑ **Portugu√™s:** {lesson['pt']}\n"
        text += f"üá∫üá∏ **Ingl√™s:** {lesson['en']}\n"
        
        if lesson.get('pronunciation'):
            text += f"üó£Ô∏è **Pron√∫ncia:** {lesson['pronunciation']}\n"
        
        # Explica√ß√£o
        if lesson.get('explanation'):
            text += f"\nüí° **O que √©:** {lesson['explanation']}\n"
        
        # Exemplo
        if lesson.get('example_pt') and lesson.get('example_en'):
            text += f"\nüìù **Exemplo:**\n"
            text += f"üáßüá∑ {lesson['example_pt']}\n"
            text += f"üá∫üá∏ {lesson['example_en']}\n"
        
        # Dica
        if lesson.get('tips'):
            text += f"\nüéØ **Dica:** {lesson['tips']}\n"
        
        # Conex√£o com posi√ß√£o do jogador
        if session.position and session.position != "N√£o jogo, s√≥ assisto":
            position_tip = self._get_position_specific_tip(lesson, session.position)
            if position_tip:
                text += f"\n‚öΩ **Para {session.position}:** {position_tip}"
        
        text += "\n\nüì± Use /pr√≥xima para continuar ou /√°udio para ouvir novamente!"
        
        return text
    
    def _generate_transition_text(self, session: UserSession, next_lesson: Dict[str, Any]) -> str:
        """Gera texto de transi√ß√£o entre li√ß√µes"""
        transitions = [
            f"Muito bem, {session.name}! Vamos para a pr√≥xima! üöÄ",
            f"Boa, {session.name}! Agora vem outra palavra importante! ‚öΩ",
            f"Excelente! Bora continuar aprendendo, {session.name}! üí™",
            f"Mandou bem! Pr√≥xima palavra chegando, {session.name}! üî•"
        ]
        
        transition = random.choice(transitions)
        lesson_text = self._format_lesson_text(next_lesson, session)
        
        return f"{transition}\n\n{lesson_text}"
    
    async def _generate_lesson_audio(self, session: UserSession, lesson: Dict[str, Any]) -> Tuple[Optional[str], Optional[str]]:
        """Gera √°udios para a li√ß√£o"""
        try:
            # Texto para √°udio em portugu√™s (professor)
            pt_text = f"Vamos aprender a palavra {lesson['pt']}"
            
            # Texto para √°udio em ingl√™s (vocabul√°rio)
            en_text = lesson['en']
            
            # Gera √°udios
            pt_audio, en_audio = await audio_manager.generate_lesson_audio(
                session.user_id, pt_text, en_text
            )
            
            return pt_audio, en_audio
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar √°udio da li√ß√£o: {e}")
            return None, None
    
    def _get_position_specific_tip(self, lesson: Dict[str, Any], position: str) -> Optional[str]:
        """Retorna dica espec√≠fica para a posi√ß√£o do jogador"""
        word = lesson['pt'].lower()
        
        position_tips = {
            "Goleiro": {
                "goleiro": "Essa √© sua posi√ß√£o! Em ingl√™s, voc√™ √© o 'goalkeeper'!",
                "defesa": "Muito importante para voc√™! 'Save' √© quando voc√™ defende!",
                "bola": "A 'ball' que voc√™ mais precisa pegar!",
                "gol": "O 'goal' que voc√™ precisa defender!"
            },
            "Zagueiro": {
                "zagueiro": "Sua posi√ß√£o! 'Defender' ou 'center-back' no ingl√™s!",
                "defesa": "Seu trabalho principal! 'Defense' √© fundamental!",
                "passe": "Muito importante para iniciar jogadas! 'Pass' certeiro!",
                "cabeceada": "Arma poderosa na defesa e no ataque!"
            },
            "Atacante": {
                "atacante": "Sua posi√ß√£o! 'Striker' ou 'forward' em ingl√™s!",
                "gol": "Seu objetivo principal! 'Goal' √© sua especialidade!",
                "chute": "'Shot' certeiro √© sua marca registrada!",
                "driblar": "Sua arma secreta! 'Dribble' com estilo!"
            },
            "Meio-campo": {
                "meio-campo": "Sua posi√ß√£o! 'Midfielder' √© voc√™!",
                "passe": "Sua especialidade! 'Pass' √© sua ferramenta principal!",
                "assist√™ncia": "'Assist' √© o que voc√™ faz de melhor!",
                "vis√£o de jogo": "Sua qualidade principal no campo!"
            }
        }
        
        return position_tips.get(position, {}).get(word)

class ProgressTracker:
    """Rastreador de progresso educacional (com dados fake)"""
    
    def __init__(self):
        self.fake_data_generator = FakeProgressGenerator()
    
    def get_user_progress(self, session: UserSession) -> str:
        """Retorna progresso do usu√°rio (dados fake)"""
        return self.fake_data_generator.generate_progress_report(session)
    
    def get_lesson_stats(self, user_id: int) -> Dict[str, Any]:
        """Retorna estat√≠sticas da li√ß√£o atual"""
        session = user_state_manager.get_session(user_id)
        if not session:
            return {}
        
        current_lesson = content_manager.get_lesson_by_id(session.current_lesson_id)
        
        return {
            'current_lesson_id': session.current_lesson_id,
            'current_lesson': current_lesson.get('pt', '') if current_lesson else '',
            'lessons_completed': len(session.lessons_completed),
            'total_interactions': session.total_interactions,
            'session_duration': str(session.get_session_duration()),
            'english_level': session.english_level
        }

class FakeProgressGenerator:
    """Gerador de dados fake para demonstra√ß√£o"""
    
    def generate_progress_report(self, session: UserSession) -> str:
        """Gera relat√≥rio de progresso fake"""
        
        # Dados aleat√≥rios mas consistentes para cada usu√°rio
        seed = hash(session.user_id) % 1000
        random.seed(seed)
        
        # Estat√≠sticas fake
        lessons_completed = random.randint(8, 18)
        total_lessons = 20
        vocabulary_learned = random.randint(85, 150)
        daily_streak = random.randint(3, 21)
        accuracy = random.randint(75, 95)
        
        # Conquistas fake
        achievements = [
            "üèÜ Primeiro Gol", "‚öΩ Craque da Pron√∫ncia", "üéØ Focado",
            "üî• Sequ√™ncia de Ouro", "üìö Estudioso", "üåü All Star",
            "üí™ Persistente", "üéÆ Interativo", "üëë Mestre das Palavras"
        ]
        
        user_achievements = random.sample(achievements, random.randint(2, 5))
        
        # Progresso por categoria
        categories_progress = {
            "Posi√ß√µes": random.randint(70, 100),
            "A√ß√µes": random.randint(60, 95),
            "Equipamentos": random.randint(80, 100),
            "Campo": random.randint(65, 90),
            "T√°ticas": random.randint(40, 80)
        }
        
        report = f"""
üìä **Estat√≠sticas do {session.name}**

‚≠ê **Progresso Geral:**
üìö Li√ß√µes: {lessons_completed}/{total_lessons} ({int(lessons_completed/total_lessons*100)}%)
üéØ Vocabul√°rio: {vocabulary_learned} palavras aprendidas
üî• Sequ√™ncia: {daily_streak} dias consecutivos
üéØ Precis√£o: {accuracy}%
‚öΩ Posi√ß√£o: {session.position}

üìà **Progresso por Categoria:**
"""
        
        for category, progress in categories_progress.items():
            bar = "‚ñà" * int(progress/10) + "‚ñë" * (10 - int(progress/10))
            report += f"{category}: {bar} {progress}%\n"
        
        report += f"\nüèÜ **Conquistas Desbloqueadas:**\n"
        for achievement in user_achievements:
            report += f"{achievement}\n"
        
        report += f"\nüí° **Dica:** Continue praticando para desbloquear mais conquistas!"
        report += f"\nüöÄ **Continue assim, {session.name}! Voc√™ est√° indo muito bem!**"
        
        return report

class LessonContent:
    """Gerenciador de conte√∫do das li√ß√µes"""
    
    @staticmethod
    def get_lesson_by_category(category: str, level: str) -> Optional[Dict[str, Any]]:
        """Busca li√ß√£o por categoria"""
        from content import lesson_manager as content_manager
        lessons = content_manager.get_lessons_by_level(level)
        
        category_lessons = [l for l in lessons if l.get('category') == category]
        
        if category_lessons:
            return random.choice(category_lessons)
        
        return None
    
    @staticmethod
    def search_lessons(query: str, level: str) -> list:
        """Busca li√ß√µes por palavra-chave"""
        from content import lesson_manager as content_manager
        lessons = content_manager.get_lessons_by_level(level)
        
        query_lower = query.lower()
        matches = []
        
        for lesson in lessons:
            if (query_lower in lesson.get('pt', '').lower() or 
                query_lower in lesson.get('en', '').lower() or
                query_lower in lesson.get('explanation', '').lower()):
                matches.append(lesson)
        
        return matches

# Inst√¢ncia global
lesson_delivery = LessonDelivery()
progress_tracker = ProgressTracker()